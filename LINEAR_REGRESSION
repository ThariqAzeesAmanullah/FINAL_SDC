# Step 1: Import libraries
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Step 2: Generate synthetic dataset
np.random.seed(42)
age = np.random.randint(21, 60, size=(500, 1))
salary = np.random.randint(20000, 100000, size=(500, 1))
credit_score = np.random.randint(30, 100, size=(500, 1))
debt = np.random.randint(0, 50000, size=(500, 1))

# Combine features
X = np.hstack((age, salary, credit_score, debt))

# Logic for loan approval: good credit, decent salary, low debt
y = ((credit_score > 60) & (salary > 30000) & (debt < 20000)).astype(int).reshape(-1)

# Step 3: Train-test split & scaling
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 4: Train the logistic regression model
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# ---------------- USER INPUT SECTION ----------------
print("\n📋 Enter details to check loan eligibility:")

try:
    age_input = float(input("Age: "))
    salary_input = float(input("Monthly Salary (₹): "))
    credit_score_input = float(input("Credit Score (0-100): "))
    debt_input = float(input("Existing Debt (₹): "))

    user_input = np.array([[age_input, salary_input, credit_score_input, debt_input]])
    user_scaled = scaler.transform(user_input)

    # Step 5: Prediction
    prediction = model.predict(user_scaled)[0]
    prob = model.predict_proba(user_scaled)[0][1]

    # Step 6: Result
    if prediction == 1:
        print(f"\n✅ Eligible for Loan (Confidence: {prob:.2f})")
    else:
        print(f"\n❌ Not Eligible for Loan (Confidence: {1 - prob:.2f})")

except ValueError:
    print("⚠️ Invalid input! Please enter numerical values.")
